Относительный адрес: адрес начиная с вершины стека переменных
Абсолютный адрес: адрес начиная с нуля
Типы данных в стеке переменных:
	D - double 8 байт
	F - float 4 байта
	L - long 8 байт
	I - int 4 байта
	S - short 2 байта
	C - char 1 байт
Типы данных в основном стеке:
	D - double 8 байт
	L - long 8 байт
	I - int 4 байта

Флаг команды CmdFlag (2 байта):
	//биты: хххх B A 9 8 7 6 5 432 10
	биты 01 - Тип данных на верхушке основного стека
		0 - int
		1 - long
		2 - float (больше не поддерживается)
		3 - double
	биты 234 - Тип данных переменной
		0 - char
		1 - short
		2 - int
		3 - long
		4 - float
		5 - double
	бит 5 - Переменная находяться по 4-ёх байтному относительному адресу
			К адресу применяется сдвиг до базы стека вершин. База стека вершин храниться с стеке баз.

	бит 6 - Переменная находяться по 4-ёх байтному абсолютному адресу.
	бит 7 - Адрес переменной находится на вершине стека значений (для команды MOV - под данными)
	бит 8 - Для адреса применяется сдвиг указанный в инструкции
	бит 9 - Для адреса применяется сдвиг находящийся в стеке
	бит A - Финальный адресс проверяется на превышение размера указанного в инструкции
	бит B - Финальный адресс проверяется на превышение размера находящегося в стеке
	биты х - зарезервированы

	Расположение адреса, размера, сдвига и данных в стеке идёт с следующем порядке:
	[size]
	[shift]
	[address]
	[value] - вершина стека.
	Каждое из этих полей отсутствует, если не используется инструкцией.
	
Флаг операции OperFlag (1 байт):
	биты xxxxxx 01
	
	биты 01 - Тип над которым работает операция
		0 - double
		1 - float (больше не поддерживается)
		2 - long
		3 - int

Значения в [] опциональны, и могут отсутствовать.

Синтаксис команды: Команда, [Флаг (CmdFlag или OperFlag)], [Данные команды]

Список доступных команд и их описание:
	NOP // (cmdNop = 0) No OPeration
		Отсутствие операции (может свидетельствовать об ошибке в байткоде)
		
	CTI OperFlag, UINT size // (cmdCTI = 103) Convert To Index
		Конвентирует число на вершине стека в int и умножает на size
		
	PUSH CmdFlag, [val], [address], [shift], [size] // (cmdPush = 100) PUSH
		  Кладёт на вершину основного стека значение, которое может следовать за командой (val), 
		или может браться из стека переменных, если предоставлен адрес.
		  В зависимости от значений CmdFlag, значение адреса может изменяться в соответствии с полями
		address, shift и size, которые могут находится как в стеке, так и за командой.
		  Так как в основном стеке могут находится только значения double, long и int, а переменная
		может иметь типы char, short, int, long, float и double, команда производит необходимое
		преобразование. Типы указаны в CmdFlag (биты 01 и 234)
		
	POP CmdFlag // (cmdPop = 101) POP
		Убирает значение с вершины основного стека. Тип указан в CmdFlag (биты 01)

	MOV CmdFlag, [address], [shift], [size] // (cmdMov = 102) MOVe
		  Копирует значение с вершины основного стека в переменную по адресу.
		  В зависимости от значений CmdFlag, значение адреса может изменяться в соответствии с полями
		address, shift и size, которые могут находится как в стеке, так и за командой.
		  Типы указаны в CmdFlag (биты 01 и 234)
		  
	RTOI CmdFlag // (cmdRTOI = 104) Real TO Int
		Преобразует вещественное значение на вершине стека в целочисленное.
		Исходный тип указан в битах 01 CmdFlag. Единственное возможное значение - double
		Целевой тип указан в битах 234 CmdFlag. Возможные значения - int, long
	
	ITOR CmdFlag // (cmdITOR = 105) Int TO Real
		Преобразует целочисленное число на вершине стека в вещественное.
		Исходный тип указан в битах 01 CmdFlag. Возможные значения - int, long
		Целевой тип указан в битах 234 CmdFlag. Единственное возможное значение - double
	
	ITOL // (cmdITOL = 106) Int TO Long
		Преобразует int на вершине стека в long
		
	LTOI // (cmdLTOI = 107) Long TO Int
		Преобразует long на вершине стека в int
	
	SWAP CmdFlag // (cmdSwap = 108) SWAP
		Менять два значение на верху стека местами.
		Тип самого верхнего значения описан битами 234 CmdFlag.
		Тип второго значения описа битами 01 CmgFlag.
	
	COPY OperFlag // (cmdCopy = 109) COPY
		Дублирует значение на верхушке стека. Тип описан в флаге.
	
	JMP address // (cmdJmp = 110) unconditional JuMP
		Безусловные переход по адресу.
		
	JMPZ OperFlag, address // (cmdJmpZ = 111) JuMP on Zero
		Условные переход по адресу, если значение на верхушке стека равно нулю.
		Операция удаляет значение на верхушке стека.
		
	JMPNZ OperFlag, address // (cmdJmpNZ = 112) JuMP on Not Zero
		Условные переход по адресу, если значение на верхушке стека не равно нулю.
		Операция удаляет значение на верхушке стека.

	CALL address // (cmdCall = 113) CALL function
		Вызов функции по адресу. Адрес следующей за этой операции кладётся в стек вызовов.
		
	CALLSTD UINT len, char name[] // (cmdCallStd = 114) CALL STanDart function
		Вызов предопределённой функции. Имя функции длинною len следует за командой.
		Доступные функции:
			clock - кладёт на вершину время в милисекундах (int)
			cos, sin, tan, ctg, ceil, floor, sqrt - берут double на вершине стека, и заменяют результатом (double)
	
	RET // (cmdReturn = 115) RETurn
		Возврат из функции или из программы. Адрес возврата берётся с вершины стека вызовов и убирается от туда.
		Если стек вызовов пуст, но выполняется данная команда, происходит выход из программы.
