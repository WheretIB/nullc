//complex type test (simple)
var float f1;
var float2 f2;
var float3 f3;
var float4 f4;
f1 = 1; // f1 = 1.0
f2.x = 2.0; // f2.x = 2.0
f2.y = 3l; // f2.y = 3.0
f3.x = f2.y; // f3.x = 3.0
f3.y = 4.0f; // f3.y = 4.0
f3.z = f1*f3.x; // f3.z = 3.0
f4.x = f3.y; // f4.x = 4.0
f4.y = 6; // f4.y = 6.0
f4.z = f3.z++; //f4.z = 3.0 f3.z = 4.0
f4.w = 12; // f4.w = 12.0
f3.x += f4.y++; // f3.x = 9.0 f4.y = 7.0
f3.y -= f4.z--; // f3.y = 1.0 f4.z = 2.0
f3.z++; // f3.z = 5.0
++f4.x; // f4.x = 5.0
f4.y--; // f4.y = 6.0
--f4.z; // f4.z = 1.0
f4.w *= f2.x += f3.z = 5; // f3.z = 5.0 f2.x = 7.0 f4.w = 84
f2.x /= 0.5; // f2.x = 14.0
f2.y ^= 2.0; // f2.y = 9.0
// f1 = 1
// f2 = 14; 9
// f3 = 9; 1; 5
// f4 = 5; 6; 1; 84
return 1;

//complex type test (array)
var float3 fa[10];
for(var int i = 0; i < 10; i++)
{
	fa[i].x = i*8;
	fa[i].y = fa[i].x++ - i*4;
	fa[fa[(fa[i].x-1)*0.125].y*0.25].z = i+100;
}

return 1;

var float2 a;
a/*[gg]*/.x = 2;
a.y = a/*[gg]*/.x + 3;
return a.x;

var float4x4 mat;
mat.row1.y = 5;
return 1;

var int a=5;
var double d[10];
for(var int i = 0; i < a; i++)
d[i] = i*2 + i-2;
return d[5];

var double d[10];
return d[5];

var float4 f4;
f4.y--;
--f4.z;
return 1;

func int test(int x, int y, int z){return x*y+z;}
return 1+test(2, 3, 4);

func int fib(int n){ if(n<3) return 1; return fib(n-1)+fib(n-2); }
func int test(int x, int y, int z){return x*y+z;}
var int b = 1;
if(7>5)
b = 3;
return b+test(2, 3, 4);

func int fib(int n){ if(n<3) return 5; return 10; }
return fib(1);

func int fib(int n){ if(n<3) return 1; return fib(n-2)+fib(n-1); }
return fib(4);

var int b = 3;
if(b < 1)
  b = 10;
return b;

var int res[5]=1;
res[1] = 13;
res[2] = 3;
res[res[2]] = 4;
res[res[res[2]]] = 12;
return 5;

var int a=0;
var int b[512];
while(a < 256)
{
var char c[16];
var char ref d
a = ++a + b[a];
}
return 0;

//integer tests
var int res[30];
var int a = 14, b = 3, c = 0;
res[0] = a+b;
res[1] = a-b;
res[2] = -a;
res[3] = ~b;
res[4] = a*b;
res[5] = a/b;
res[6] = a%b;
res[7] = a**b;
res[8] = a > b;
res[9] = a < b;
res[10] = a >= b;
res[11] = a <= b;
res[12] = a == b;
res[13] = a != b;
res[14] = a << b;
res[15] = a >> b;
res[16] = a & b;
res[17] = a | b;
res[18] = a ^ b;
res[19] = a and b;
res[20] = a or b;
res[21] = a xor b;
res[22] = a and c;
res[23] = a or c;
res[24] = a xor c;
res[25] = !a;
res[26] = !c;

return 1;

//floating point tests
var double res[15];
var double a = 14.0, b = 3.0;
res[0] = a+b;
res[1] = a-b;
res[2] = -a;
res[3] = a*b;
res[4] = a/b;
res[5] = a%b;
res[6] = a**b;
res[7] = a > b;
res[8] = a < b;
res[9] = a >= b;
res[10] = a <= b;
res[11] = a == b;
res[12] = a != b;
res[13] = !a;

return a+b;

//long tests
var long res[24];
var long a = 4494967296l, b = 594967296l, c = 3;
res[0] = a+b; // 5089934592
res[1] = a-b; // 3900000000
res[2] = -a; // -4494967296
res[3] = ~a; // -4494967297
res[4] = a*b; // 2674358537709551616
res[5] = a/b; // 7
res[6] = a%b; // 330196224
res[7] = 59496729**c; // 3659347023269828617
res[8] = a > b; // 1
res[9] = a < b; // 0
res[10] = a >= b; // 1
res[11] = a <= b; // 0
res[12] = a == b; // 0
res[13] = a != b; // 1
res[14] = a << c; // 35959738368 
res[15] = c << 45; // 105553116266496 
res[16] = a >> c; // 561870912
res[17] = a & b; // 56771072
res[18] = a | b; // 5033163520
res[19] = a ^ b; // 4976392448
res[20] = a and b; // 1
res[21] = a or b; // 1
res[22] = a xor b; // 0
res[23] = !a; // 0

return 1;

//decrement and increment tests for all types
var double a1=5, b1=5;
var float a2=5, b2=5;
var long a3=5, b3=5;
var int a4=5, b4=5;
var short a5=5, b5=5;
var char a6=5, b6=5;
a1++;
b1--;
a2++;
b2--;
a3++;
b3--;
a4++;
b4--;
a5++;
b5--;
a6++;
b6--;
return 1;

func double test(float x, float y){ /*teste*/return x**2*y; }
var int a=5;
var float b, c[3]=14**2-134;
var double d[10];
for(var int i = 0; i< 10; i++)
d[i] = test(i*2, i-2);
var double n=1;
while(1){ n*=2; if(n>1000) break; }
return 2+test(2, 3)+a**b;


//longPow speed test (2 sec on x86)
var long a = 43l, b = 10l; // 2 sec
//var long a = 1l, b = 1250l; // 100 ms
//var long a = 0l, b = 1250l; // 100 ms
//var long a = 48l, b = 1250l; // 110 ms
//var long a = 45486127846l, b = 10l; // 2 sec
//var long a = 2l, b = 63l; // 3 sec
var long c;
for(var int i = 0; i < 10000000; i++)
  c = a**b;
return c;

var int a=5, b =0;
return a/b;

// Type conversions
var int ia=3, ib, ic;
var double da=5.0, db, dc;
var long la=4l, lb, lc;
ib = da;
ic = la;
db = ia;
dc = la;
lb = ia;
lc = da;
return 1;

var int a[10]=5;
return 1;

// Build-In function checks
var double res[20];
res[0] = cos(0); // 1.0
res[1] = cos(60); // 0.5
res[2] = cos(180); // -1.0

res[3] = sin(0); // 0.0
res[4] = sin(30); // 0.5
res[5] = sin(180); // 0.0

res[6] = ceil(1.5); // 2.0
res[7] = floor(1.5); // 1.0
res[8] = ceil(-1.5); // -1.0
res[9] = floor(-1.5); // -2.0

res[10] = tan(0); // 0.0
res[11] = tan(45); // 1.0
res[12] = tan(90); // +inf

res[13] = ctg(0); // +inf
res[14] = ctg(45); // 1.0
res[15] = ctg(90); // 0.0

res[16] = sqrt(1.0); // 1.0
res[17] = sqrt(0.0); // 0.0
res[18] = sqrt(9.0); // 3.0

res[19] = clock();
return clock();


var double a = 0.9;
return a**2.0;


func double clamp(double a, double min, double max)
{
  if(a < min)
    return min;
  if(a > max)
    return max;
  return a;
}
func double abs(double x)
{
  if(x < 0.0)
    return -x;
  return x;
}
return clamp(abs(-1.5), 0.0, 1.0);

func int test(int x, int y, int z){return x*y+z;}
var int res;
{
var int x = 2;
{
res = 1+test(x, 3, 4);
}
}
return res;

func double abs(double x)
{
  {
    if(x < 0.0)
      return -x;
  }
  return x;
}
return abs(-0.5);

//Some complexness %)
var float3 a;
var float4 b;
a = 12.0; // should fail
b = a; // should fail
return 1;

var int test[5]=0;
for(var int i = 0; i < 5; i++)
{
  test[i] = 1;
  test[i] += 5;
  test[i] = test[i]++;
  test[i] = ++test[i];
}
return 1;

var int test[2]=0;
for(var int i = 0; i < 2; i++)
  test[i] = test[i]++;
return 1;

// Pointers!
func int testA(int ref v){ return *v * 5; }
func void testB(int ref v){ *v += 5; }
var int a = 5;
var int ref b = &a;
var int c = 2;
c = *b;
*b = 14;
*b++;
*b *= 4;
testB(b);
return testA(&a);

// Pointers on complex!
func double length(float4 ref v)
{
	return sqrt((v->x*v->x)+(v->y*v->y)+(v->z*v->z));
}
func void normalize(float4 ref v)
{
	var double len = length(v);
	v->x /= len; v->y /= len; v->z /= len;
}
var float4 a;
a.x = 12.0;
a.y = 4.0;
a.z = 3.0;
a.w = 1.0;
var float4 ref b = &a;
normalize(&a);
return length(b);

var float4 a;
var float4 ref b = &a;
b->x = 5.0f;
return b->x;

func double testA(float4 ref v){ return v->x; }
var float4 a;
var float4 ref b = &a;
a.x = 5.0f;
return testA(b);

var float3 a;
var float x = a.x, y = a.y;
return 1;

var int a = 12;
var int res[6];
res[0] = a + 0;
res[1] = a * 0;
res[2] = a * 1;
res[3] = (a*1) +(a*0);
res[4] = a*2+0;
res[5] = a*3*1;
return 1;

var int arr[5];
var float4 arrF[4];
var int ref a = &arr[3];
*a = 55;
var float4 ref b = &arrF[1];
b->x = 85;
var float ref c = &arrF[1].y;
*c = 125;
{
	var int ref a = &arr[1];
	*a = 5;
	var float4 ref b = &arrF[2];
	b->x = 8;
	var float ref c = &arrF[2].y;
	*c = 12;
}
return 1;

var int calltest = 0;
func int fib(int n, int ref calls)
{
	*calls++;
	calltest++;
	if(n < 3)
		return 1;
	return fib(n-2, calls) + fib(n-1, calls);
}
var int calls = 0;
return fib(40, &calls);


func double neg(double a){ return -a; }
var double x = 5.0, nx;
for(var int i = 0; i < 50000000; i++)
nx = neg(x);
return nx;